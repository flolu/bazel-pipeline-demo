load("@io_bazel_rules_k8s//k8s:object.bzl", "k8s_object")
load("@io_bazel_rules_docker//container:container.bzl", "container_image")
load("@io_bazel_rules_docker//docker/util:run.bzl", "container_run_and_commit")

container_run_and_commit(
    name = "pre_build_image",
    commands = [
        "apt-get update",
        "apt-get -y install postgresql-13-cron",
        "apt-get clean",
    ],
    image = "@postgres//image",
)

container_image(
    name = "build_image",
    base = ":pre_build_image",
    files = [
        ":01-install.sh",
        ":02-init.sql",
    ],
    symlinks = {
        "/docker-entrypoint-initdb.d/01-install.sh": "/01-install.sh",
        "/docker-entrypoint-initdb.d/02-init.sql": "/02-init.sql",
    },
)

container_image(
    name = "image",
    base = ":build_image",
)

load("@pipeline_demo//util/ytt:run.bzl","ytt")

ytt(
    name = "config-map-ytt",
    file = ":config-map.yaml",
)

k8s_object(
    name = "configmap",
    cluster = "{STABLE_CLUSTER}",
    kind = "ConfigMap",
    template = ":config-map-ytt",
)

# TODO postgresql persistance
# k8s_object(
#     name = "volume",
#     cluster = "{STABLE_CLUSTER}",
#     kind = "PersistentVolumeClaim",
#     template = "volume.yaml",
# )

load("@pipeline_demo//util/ytt:run.bzl","ytt")

ytt(
    name = "deployment-ytt",
    file = ":deployment.yaml",
)

k8s_object(
    name = "deployment",
    cluster = "{STABLE_CLUSTER}",
    kind = "Deployment",
    images = {
        "{STABLE_REGISTRY}/posgresql:dev": ":image",
    },
    template = ":deployment-ytt",
)

load("@io_bazel_rules_k8s//k8s:objects.bzl", "k8s_objects")

k8s_objects(
    name = "app",
    objects = [
        ":configmap",
        # ":volume",
        ":deployment",
    ],
    visibility = ["//visibility:public"],
)
